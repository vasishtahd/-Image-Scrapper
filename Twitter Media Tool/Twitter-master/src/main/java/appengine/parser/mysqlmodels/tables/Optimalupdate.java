/**
 * This class is generated by jOOQ
 */
package appengine.parser.mysqlmodels.tables;


import appengine.parser.mysqlmodels.Keys;
import appengine.parser.mysqlmodels._6txkrsiwk3;
import appengine.parser.mysqlmodels.enums.OptimalupdateOperation;
import appengine.parser.mysqlmodels.tables.records.OptimalupdateRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Optimalupdate extends TableImpl<OptimalupdateRecord> {

    private static final long serialVersionUID = 861602201;

    /**
     * The reference instance of <code>6txKRsiwk3.optimalupdate</code>
     */
    public static final Optimalupdate OPTIMALUPDATE = new Optimalupdate();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OptimalupdateRecord> getRecordType() {
        return OptimalupdateRecord.class;
    }

    /**
     * The column <code>6txKRsiwk3.optimalupdate.operation</code>.
     */
    public final TableField<OptimalupdateRecord, OptimalupdateOperation> OPERATION = createField("operation", org.jooq.util.mysql.MySQLDataType.VARCHAR.asEnumDataType(appengine.parser.mysqlmodels.enums.OptimalupdateOperation.class), this, "");

    /**
     * The column <code>6txKRsiwk3.optimalupdate.updatedtime</code>.
     */
    public final TableField<OptimalupdateRecord, Timestamp> UPDATEDTIME = createField("updatedtime", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>6txKRsiwk3.optimalupdate.dummy</code>.
     */
    public final TableField<OptimalupdateRecord, Integer> DUMMY = createField("dummy", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>6txKRsiwk3.optimalupdate</code> table reference
     */
    public Optimalupdate() {
        this("optimalupdate", null);
    }

    /**
     * Create an aliased <code>6txKRsiwk3.optimalupdate</code> table reference
     */
    public Optimalupdate(String alias) {
        this(alias, OPTIMALUPDATE);
    }

    private Optimalupdate(String alias, Table<OptimalupdateRecord> aliased) {
        this(alias, aliased, null);
    }

    private Optimalupdate(String alias, Table<OptimalupdateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return _6txkrsiwk3._6TXKRSIWK3;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<OptimalupdateRecord> getPrimaryKey() {
        return Keys.KEY_OPTIMALUPDATE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<OptimalupdateRecord>> getKeys() {
        return Arrays.<UniqueKey<OptimalupdateRecord>>asList(Keys.KEY_OPTIMALUPDATE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Optimalupdate as(String alias) {
        return new Optimalupdate(alias, this);
    }

    /**
     * Rename this table
     */
    public Optimalupdate rename(String name) {
        return new Optimalupdate(name, null);
    }
}
