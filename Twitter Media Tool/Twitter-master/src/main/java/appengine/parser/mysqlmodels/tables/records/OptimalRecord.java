/**
 * This class is generated by jOOQ
 */
package appengine.parser.mysqlmodels.tables.records;


import appengine.parser.mysqlmodels.tables.Optimal;

import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OptimalRecord extends TableRecordImpl<OptimalRecord> implements Record7<Timestamp, String, String, Double, String, Double, Double> {

    private static final long serialVersionUID = 2145780418;

    /**
     * Setter for <code>6txKRsiwk3.optimal.time</code>.
     */
    public void setTime(Timestamp value) {
        set(0, value);
    }

    /**
     * Getter for <code>6txKRsiwk3.optimal.time</code>.
     */
    public Timestamp getTime() {
        return (Timestamp) get(0);
    }

    /**
     * Setter for <code>6txKRsiwk3.optimal.coin</code>.
     */
    public void setCoin(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>6txKRsiwk3.optimal.coin</code>.
     */
    public String getCoin() {
        return (String) get(1);
    }

    /**
     * Setter for <code>6txKRsiwk3.optimal.buy_from</code>.
     */
    public void setBuyFrom(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>6txKRsiwk3.optimal.buy_from</code>.
     */
    public String getBuyFrom() {
        return (String) get(2);
    }

    /**
     * Setter for <code>6txKRsiwk3.optimal.buy_for</code>.
     */
    public void setBuyFor(Double value) {
        set(3, value);
    }

    /**
     * Getter for <code>6txKRsiwk3.optimal.buy_for</code>.
     */
    public Double getBuyFor() {
        return (Double) get(3);
    }

    /**
     * Setter for <code>6txKRsiwk3.optimal.sell_at</code>.
     */
    public void setSellAt(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>6txKRsiwk3.optimal.sell_at</code>.
     */
    public String getSellAt() {
        return (String) get(4);
    }

    /**
     * Setter for <code>6txKRsiwk3.optimal.sell_for</code>.
     */
    public void setSellFor(Double value) {
        set(5, value);
    }

    /**
     * Getter for <code>6txKRsiwk3.optimal.sell_for</code>.
     */
    public Double getSellFor() {
        return (Double) get(5);
    }

    /**
     * Setter for <code>6txKRsiwk3.optimal.profit</code>.
     */
    public void setProfit(Double value) {
        set(6, value);
    }

    /**
     * Getter for <code>6txKRsiwk3.optimal.profit</code>.
     */
    public Double getProfit() {
        return (Double) get(6);
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row7<Timestamp, String, String, Double, String, Double, Double> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row7<Timestamp, String, String, Double, String, Double, Double> valuesRow() {
        return (Row7) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field1() {
        return Optimal.OPTIMAL.TIME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Optimal.OPTIMAL.COIN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return Optimal.OPTIMAL.BUY_FROM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field4() {
        return Optimal.OPTIMAL.BUY_FOR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field5() {
        return Optimal.OPTIMAL.SELL_AT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field6() {
        return Optimal.OPTIMAL.SELL_FOR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field7() {
        return Optimal.OPTIMAL.PROFIT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value1() {
        return getTime();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getCoin();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getBuyFrom();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value4() {
        return getBuyFor();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value5() {
        return getSellAt();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value6() {
        return getSellFor();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value7() {
        return getProfit();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OptimalRecord value1(Timestamp value) {
        setTime(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OptimalRecord value2(String value) {
        setCoin(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OptimalRecord value3(String value) {
        setBuyFrom(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OptimalRecord value4(Double value) {
        setBuyFor(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OptimalRecord value5(String value) {
        setSellAt(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OptimalRecord value6(Double value) {
        setSellFor(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OptimalRecord value7(Double value) {
        setProfit(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OptimalRecord values(Timestamp value1, String value2, String value3, Double value4, String value5, Double value6, Double value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached OptimalRecord
     */
    public OptimalRecord() {
        super(Optimal.OPTIMAL);
    }

    /**
     * Create a detached, initialised OptimalRecord
     */
    public OptimalRecord(Timestamp time, String coin, String buyFrom, Double buyFor, String sellAt, Double sellFor, Double profit) {
        super(Optimal.OPTIMAL);

        set(0, time);
        set(1, coin);
        set(2, buyFrom);
        set(3, buyFor);
        set(4, sellAt);
        set(5, sellFor);
        set(6, profit);
    }
}
