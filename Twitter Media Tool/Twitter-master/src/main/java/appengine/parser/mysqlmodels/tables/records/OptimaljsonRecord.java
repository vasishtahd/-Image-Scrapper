/**
 * This class is generated by jOOQ
 */
package appengine.parser.mysqlmodels.tables.records;


import appengine.parser.mysqlmodels.tables.Optimaljson;

import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OptimaljsonRecord extends TableRecordImpl<OptimaljsonRecord> implements Record3<Timestamp, String, String> {

    private static final long serialVersionUID = 161600735;

    /**
     * Setter for <code>6txKRsiwk3.optimaljson.time</code>.
     */
    public void setTime(Timestamp value) {
        set(0, value);
    }

    /**
     * Getter for <code>6txKRsiwk3.optimaljson.time</code>.
     */
    public Timestamp getTime() {
        return (Timestamp) get(0);
    }

    /**
     * Setter for <code>6txKRsiwk3.optimaljson.json</code>.
     */
    public void setJson(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>6txKRsiwk3.optimaljson.json</code>.
     */
    public String getJson() {
        return (String) get(1);
    }

    /**
     * Setter for <code>6txKRsiwk3.optimaljson.coinlabel</code>.
     */
    public void setCoinlabel(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>6txKRsiwk3.optimaljson.coinlabel</code>.
     */
    public String getCoinlabel() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<Timestamp, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<Timestamp, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field1() {
        return Optimaljson.OPTIMALJSON.TIME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Optimaljson.OPTIMALJSON.JSON;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return Optimaljson.OPTIMALJSON.COINLABEL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value1() {
        return getTime();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getJson();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getCoinlabel();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OptimaljsonRecord value1(Timestamp value) {
        setTime(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OptimaljsonRecord value2(String value) {
        setJson(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OptimaljsonRecord value3(String value) {
        setCoinlabel(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OptimaljsonRecord values(Timestamp value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached OptimaljsonRecord
     */
    public OptimaljsonRecord() {
        super(Optimaljson.OPTIMALJSON);
    }

    /**
     * Create a detached, initialised OptimaljsonRecord
     */
    public OptimaljsonRecord(Timestamp time, String json, String coinlabel) {
        super(Optimaljson.OPTIMALJSON);

        set(0, time);
        set(1, json);
        set(2, coinlabel);
    }
}
